{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sonakshi1srivastava/ef-prediction-using-random-forest?scriptVersionId=263734739\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"7a87cf6f","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-09-24T10:58:49.813709Z","iopub.status.busy":"2025-09-24T10:58:49.813394Z","iopub.status.idle":"2025-09-24T11:01:02.044069Z","shell.execute_reply":"2025-09-24T11:01:02.043286Z"},"papermill":{"duration":132.238786,"end_time":"2025-09-24T11:01:02.047615","exception":false,"start_time":"2025-09-24T10:58:49.808829","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Cardiac EF Prediction Model Training\n","==================================================\n","Generating synthetic dataset...\n","Error generating sample 182: operands could not be broadcast together with shapes (124,) (150,) (124,) \n","Generated 1000/5000 samples\n","Error generating sample 1048: operands could not be broadcast together with shapes (139,) (150,) (139,) \n","Error generating sample 1434: operands could not be broadcast together with shapes (135,) (150,) (135,) \n","Error generating sample 1472: operands could not be broadcast together with shapes (130,) (150,) (130,) \n","Error generating sample 1630: operands could not be broadcast together with shapes (141,) (150,) (141,) \n","Error generating sample 1902: operands could not be broadcast together with shapes (115,) (150,) (115,) \n","Error generating sample 1938: operands could not be broadcast together with shapes (0,) (100,) (0,) \n","Error generating sample 1977: operands could not be broadcast together with shapes (135,) (150,) (135,) \n","Generated 2000/5000 samples\n","Error generating sample 2036: operands could not be broadcast together with shapes (114,) (150,) (114,) \n","Error generating sample 2093: operands could not be broadcast together with shapes (135,) (150,) (135,) \n","Error generating sample 2207: operands could not be broadcast together with shapes (101,) (150,) (101,) \n","Error generating sample 2565: operands could not be broadcast together with shapes (0,) (100,) (0,) \n","Error generating sample 2633: operands could not be broadcast together with shapes (94,) (150,) (94,) \n","Error generating sample 2764: operands could not be broadcast together with shapes (118,) (150,) (118,) \n","Generated 3000/5000 samples\n","Error generating sample 3528: operands could not be broadcast together with shapes (127,) (150,) (127,) \n","Error generating sample 3846: operands could not be broadcast together with shapes (148,) (150,) (148,) \n","Error generating sample 3940: operands could not be broadcast together with shapes (0,) (100,) (0,) \n","Error generating sample 3973: operands could not be broadcast together with shapes (121,) (150,) (121,) \n","Generated 4000/5000 samples\n","Error generating sample 4412: operands could not be broadcast together with shapes (0,) (100,) (0,) \n","Error generating sample 4565: operands could not be broadcast together with shapes (124,) (150,) (124,) \n","Dataset shape: (4980, 48)\n","EF range: 20.0% - 80.0%\n","EF mean: 57.8% ± 13.1%\n","\n","Training models...\n","\n","Training RandomForest...\n","RandomForest Results:\n","  CV MAE: 5.254\n","  Test MAE: 5.108\n","  Test RMSE: 6.884\n","  Test R²: 0.728\n","\n","Training GradientBoosting...\n","GradientBoosting Results:\n","  CV MAE: 5.295\n","  Test MAE: 5.136\n","  Test RMSE: 6.880\n","  Test R²: 0.728\n","\n","Training XGBoost...\n","XGBoost Results:\n","  CV MAE: 5.664\n","  Test MAE: 5.536\n","  Test RMSE: 7.460\n","  Test R²: 0.680\n","\n","==================================================\n","Model Comparison Results:\n","==================================================\n","           model   mae_cv  mae_test  r2_test\n","    RandomForest 5.254204  5.107872 0.727732\n","GradientBoosting 5.295114  5.136271 0.728051\n","         XGBoost 5.664050  5.536233 0.680201\n","\n","Best model: RandomForest with Test MAE: 5.108\n","\n","Performing hyperparameter optimization...\n","\n","Optimizing XGBoost hyperparameters...\n","Fitting 3 folds for each of 16 candidates, totalling 48 fits\n","Best parameters: {'learning_rate': 0.05, 'max_depth': 3, 'n_estimators': 100, 'subsample': 0.8}\n","Best CV score (MAE): 5.218465822777645\n","\n","Evaluating optimized model...\n","\n","Model Evaluation Metrics:\n","MAE: 5.124\n","RMSE: 6.885\n","R²: 0.728\n","Max Error: 30.057\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1200x500 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Plotting feature importance...\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Model saved successfully!\n","\n","==================================================\n","FINAL MODEL PERFORMANCE SUMMARY\n","==================================================\n","Best Model: RandomForest\n","Test MAE: 5.12%\n","Test R²: 0.728\n","EF Prediction Range: 20-80%\n","Model ready for deployment!\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy import signal\n","from scipy.signal import find_peaks, butter, filtfilt, welch\n","from scipy.signal.windows import gaussian\n","from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n","from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","from sklearn.preprocessing import StandardScaler\n","import xgboost as xgb\n","import joblib\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","class CardiacFeatureExtractor:\n","    def __init__(self, sampling_rate=500):\n","        self.sampling_rate = sampling_rate\n","        \n","    def extract_ecg_features(self, ecg_signal):\n","        \"\"\"Extract comprehensive features from ECG signal\"\"\"\n","        features = {}\n","        \n","        # Basic statistics\n","        features['ecg_mean'] = np.mean(ecg_signal)\n","        features['ecg_std'] = np.std(ecg_signal)\n","        features['ecg_skew'] = pd.Series(ecg_signal).skew()\n","        features['ecg_kurtosis'] = pd.Series(ecg_signal).kurtosis()\n","        \n","        # Frequency domain features\n","        f, Pxx = welch(ecg_signal, self.sampling_rate, nperseg=256)\n","        features['ecg_dominant_freq'] = f[np.argmax(Pxx)]\n","        features['ecg_spectral_energy'] = np.sum(Pxx)\n","        \n","        # R-peak detection\n","        r_peaks = self.detect_r_peaks(ecg_signal)\n","        \n","        if len(r_peaks) > 1:\n","            # RR intervals\n","            rr_intervals = np.diff(r_peaks) * (1000 / self.sampling_rate)  # Convert to ms\n","            features['hr_mean'] = 60000 / np.mean(rr_intervals)\n","            features['hr_std'] = np.std(60000 / rr_intervals)\n","            features['hrv_sdnn'] = np.std(rr_intervals)\n","            features['hrv_rmssd'] = np.sqrt(np.mean(np.square(np.diff(rr_intervals))))\n","            features['rr_intervals_count'] = len(rr_intervals)\n","            \n","            # Additional HRV features\n","            features['hrv_mean'] = np.mean(rr_intervals)\n","            features['hrv_max'] = np.max(rr_intervals)\n","            features['hrv_min'] = np.min(rr_intervals)\n","        else:\n","            # Default values if no R-peaks detected\n","            features.update({f: 0 for f in ['hr_mean', 'hr_std', 'hrv_sdnn', 'hrv_rmssd', \n","                                          'rr_intervals_count', 'hrv_mean', 'hrv_max', 'hrv_min']})\n","            \n","        return features\n","    \n","    def detect_r_peaks(self, ecg_signal):\n","        \"\"\"Improved R-peak detection using filtering and peak detection\"\"\"\n","        try:\n","            # Bandpass filter for ECG (5-15 Hz)\n","            nyquist = 0.5 * self.sampling_rate\n","            low = 5 / nyquist\n","            high = 15 / nyquist\n","            b, a = butter(3, [low, high], btype='band')\n","            filtered_ecg = filtfilt(b, a, ecg_signal)\n","            \n","            # Find peaks with adaptive height threshold\n","            height_threshold = np.mean(filtered_ecg) + 2 * np.std(filtered_ecg)\n","            peaks, _ = find_peaks(filtered_ecg, height=height_threshold, \n","                                distance=self.sampling_rate//4)  # Minimum 250ms between peaks\n","            \n","            return peaks\n","        except:\n","            return np.array([])\n","    \n","    def extract_accel_features(self, accel_x, accel_y, accel_z):\n","        \"\"\"Extract features from accelerometer data (SCG)\"\"\"\n","        features = {}\n","        \n","        # Calculate magnitude\n","        accel_magnitude = np.sqrt(accel_x**2 + accel_y**2 + accel_z**2)\n","        \n","        # Basic statistics for each axis\n","        for axis, data in zip(['x', 'y', 'z', 'mag'], \n","                            [accel_x, accel_y, accel_z, accel_magnitude]):\n","            features[f'accel_{axis}_mean'] = np.mean(data)\n","            features[f'accel_{axis}_std'] = np.std(data)\n","            features[f'accel_{axis}_max'] = np.max(data)\n","            features[f'accel_{axis}_min'] = np.min(data)\n","            features[f'accel_{axis}_range'] = np.ptp(data)  # Peak-to-peak\n","        \n","        # Spectral features for magnitude\n","        f, Pxx = welch(accel_magnitude, self.sampling_rate, nperseg=256)\n","        if len(Pxx) > 0:\n","            features['accel_dominant_freq'] = f[np.argmax(Pxx)]\n","            features['accel_spectral_energy'] = np.sum(Pxx)\n","            features['accel_spectral_centroid'] = np.sum(f * Pxx) / np.sum(Pxx)\n","        else:\n","            features.update({'accel_dominant_freq': 0, 'accel_spectral_energy': 0, \n","                           'accel_spectral_centroid': 0})\n","        \n","        # Correlation between axes\n","        features['accel_xy_corr'] = np.corrcoef(accel_x, accel_y)[0,1]\n","        features['accel_xz_corr'] = np.corrcoef(accel_x, accel_z)[0,1]\n","        features['accel_yz_corr'] = np.corrcoef(accel_y, accel_z)[0,1]\n","        \n","        return features\n","    \n","    def extract_audio_features(self, audio_signal):\n","        \"\"\"Extract features from heart sounds (PCG)\"\"\"\n","        features = {}\n","        \n","        # Basic statistics\n","        features['audio_mean'] = np.mean(audio_signal)\n","        features['audio_std'] = np.std(audio_signal)\n","        features['audio_max'] = np.max(audio_signal)\n","        features['audio_min'] = np.min(audio_signal)\n","        features['audio_skew'] = pd.Series(audio_signal).skew()\n","        \n","        # Spectral features (using higher sampling rate for audio)\n","        audio_sampling_rate = 16000\n","        f, Pxx = welch(audio_signal, audio_sampling_rate, nperseg=1024)\n","        if len(Pxx) > 0:\n","            dominant_idx = np.argmax(Pxx)\n","            features['audio_dominant_freq'] = f[dominant_idx]\n","            features['audio_spectral_centroid'] = np.sum(f * Pxx) / np.sum(Pxx)\n","            features['audio_spectral_rolloff'] = f[np.where(np.cumsum(Pxx) >= 0.85 * np.sum(Pxx))[0][0]]\n","        else:\n","            features.update({'audio_dominant_freq': 0, 'audio_spectral_centroid': 0, \n","                           'audio_spectral_rolloff': 0})\n","        \n","        return features\n","    \n","    def extract_all_features(self, ecg, accel_x, accel_y, accel_z, audio):\n","        \"\"\"Extract all features from sensor data\"\"\"\n","        features = {}\n","        \n","        try:\n","            # Extract features from each sensor modality\n","            features.update(self.extract_ecg_features(ecg))\n","            features.update(self.extract_accel_features(accel_x, accel_y, accel_z))\n","            features.update(self.extract_audio_features(audio))\n","        except Exception as e:\n","            print(f\"Error extracting features: {e}\")\n","            # Return default features if extraction fails\n","            features = self.get_default_features()\n","        \n","        return features\n","    \n","    def get_default_features(self):\n","        \"\"\"Return default feature values when extraction fails\"\"\"\n","        default_features = {\n","            'ecg_mean': 0, 'ecg_std': 0, 'ecg_skew': 0, 'ecg_kurtosis': 0,\n","            'ecg_dominant_freq': 0, 'ecg_spectral_energy': 0,\n","            'hr_mean': 0, 'hr_std': 0, 'hrv_sdnn': 0, 'hrv_rmssd': 0,\n","            'rr_intervals_count': 0, 'hrv_mean': 0, 'hrv_max': 0, 'hrv_min': 0,\n","            'accel_x_mean': 0, 'accel_x_std': 0, 'accel_x_max': 0, 'accel_x_min': 0,\n","            'accel_y_mean': 0, 'accel_y_std': 0, 'accel_y_max': 0, 'accel_y_min': 0,\n","            'accel_z_mean': 0, 'accel_z_std': 0, 'accel_z_max': 0, 'accel_z_min': 0,\n","            'accel_mag_mean': 0, 'accel_mag_std': 0, 'accel_mag_max': 0, 'accel_mag_min': 0,\n","            'accel_dominant_freq': 0, 'accel_spectral_energy': 0, 'accel_spectral_centroid': 0,\n","            'audio_mean': 0, 'audio_std': 0, 'audio_max': 0, 'audio_min': 0, 'audio_skew': 0,\n","            'audio_dominant_freq': 0, 'audio_spectral_centroid': 0, 'audio_spectral_rolloff': 0\n","        }\n","        return default_features\n","\n","class SyntheticDataGenerator:\n","    def __init__(self, n_samples=10000, sequence_length=5000):\n","        self.n_samples = n_samples\n","        self.sequence_length = sequence_length\n","        self.sampling_rate = 500\n","        \n","    def generate_healthy_ecg(self, heart_rate=70, noise_level=0.05):\n","        \"\"\"Generate synthetic healthy ECG signal\"\"\"\n","        t = np.linspace(0, 10, self.sequence_length)\n","        ecg = np.zeros_like(t)\n","        \n","        # ECG waveform parameters\n","        hr_bpm = heart_rate\n","        rr_interval = 60 / hr_bpm\n","        \n","        # Add QRS complexes at appropriate intervals\n","        for i in range(int(10 / rr_interval)):\n","            pos = i * rr_interval\n","            idx = int(pos * self.sampling_rate)\n","            \n","            # QRS complex using Gaussian window\n","            if idx + 100 < len(ecg):\n","                gauss_win = gaussian(100, std=15)  # Fixed: use scipy.signal.windows.gaussian\n","                ecg[idx:idx+100] += gauss_win * 1.0\n","            \n","            # T wave (smaller and wider)\n","            if idx + 200 < len(ecg):\n","                t_wave = gaussian(150, std=25) * 0.3\n","                ecg[idx+150:idx+300] += t_wave[:150]  # Ensure same length\n","        \n","        # Add noise\n","        noise = np.random.normal(0, noise_level, len(ecg))\n","        return ecg + noise\n","    \n","    def generate_abnormal_ecg(self, heart_rate=90, noise_level=0.08, abnormality_level=0.5):\n","        \"\"\"Generate synthetic abnormal ECG signal\"\"\"\n","        # Start with healthy ECG\n","        ecg = self.generate_healthy_ecg(heart_rate, noise_level)\n","        \n","        # Introduce abnormalities based on level\n","        if abnormality_level > 0.3:\n","            # Create irregular rhythm\n","            t = np.linspace(0, 10, self.sequence_length)\n","            irregular_ecg = np.zeros_like(t)\n","            current_time = 0\n","            \n","            while current_time < 10:\n","                # Variable RR intervals based on abnormality level\n","                rr_var = np.random.normal(60/heart_rate, abnormality_level * 0.3)\n","                current_time += rr_var\n","                idx = min(int(current_time * self.sampling_rate), len(irregular_ecg)-1)\n","                \n","                if idx + 100 < len(irregular_ecg):\n","                    gauss_win = gaussian(100, std=15)\n","                    irregular_ecg[idx:idx+100] += gauss_win * 1.0\n","            \n","            # Blend with original ECG\n","            blend_ratio = 0.3 + 0.4 * abnormality_level  # More abnormal = more irregular\n","            ecg = (1 - blend_ratio) * ecg + blend_ratio * irregular_ecg\n","        \n","        # Add extra noise for abnormal signals\n","        extra_noise = np.random.normal(0, abnormality_level * 0.1, len(ecg))\n","        return ecg + extra_noise\n","    \n","    def generate_dataset(self):\n","        \"\"\"Generate complete synthetic dataset\"\"\"\n","        X_features = []\n","        y_ef = []  # Ejection Fraction values\n","        \n","        feature_extractor = CardiacFeatureExtractor()\n","        \n","        for i in range(self.n_samples):\n","            try:\n","                # Randomly decide if sample is healthy or abnormal\n","                is_healthy = np.random.random() > 0.3  # 70% healthy, 30% abnormal\n","                \n","                if is_healthy:\n","                    heart_rate = np.random.normal(70, 10)\n","                    ef = np.random.normal(65, 5)  # Normal EF: 55-75%\n","                    ecg = self.generate_healthy_ecg(heart_rate)\n","                else:\n","                    heart_rate = np.random.normal(85, 15)\n","                    abnormality_level = np.random.uniform(0.3, 1.0)\n","                    ef = np.random.normal(40, 10)  # Abnormal EF: 20-60%\n","                    ecg = self.generate_abnormal_ecg(heart_rate, abnormality_level=abnormality_level)\n","                \n","                # Generate other sensor data (simplified simulations)\n","                time_array = np.arange(self.sequence_length) / self.sampling_rate\n","                heart_rate_hz = heart_rate / 60  # Convert to Hz\n","                \n","                # Accelerometer data (SCG) - simulating chest wall motion\n","                accel_x = (np.random.normal(0, 0.1, self.sequence_length) + \n","                          0.1 * np.sin(2 * np.pi * heart_rate_hz * time_array) +\n","                          0.05 * np.sin(2 * np.pi * 2 * heart_rate_hz * time_array))\n","                \n","                accel_y = (np.random.normal(0, 0.1, self.sequence_length) + \n","                          0.05 * np.sin(2 * np.pi * heart_rate_hz * time_array) +\n","                          0.02 * np.sin(2 * np.pi * 1.5 * heart_rate_hz * time_array))\n","                \n","                accel_z = (np.random.normal(0, 0.1, self.sequence_length) + \n","                          0.15 * np.sin(2 * np.pi * heart_rate_hz * time_array) +\n","                          0.08 * np.sin(2 * np.pi * 2.5 * heart_rate_hz * time_array))\n","                \n","                # Audio data (PCG) - simulating heart sounds\n","                audio = (np.random.normal(0, 0.05, self.sequence_length) + \n","                        0.2 * signal.sawtooth(2 * np.pi * heart_rate_hz * time_array) +\n","                        0.1 * signal.sawtooth(2 * np.pi * 2 * heart_rate_hz * time_array, width=0.5))\n","                \n","                # Extract features\n","                features = feature_extractor.extract_all_features(ecg, accel_x, accel_y, accel_z, audio)\n","                X_features.append(features)\n","                y_ef.append(max(20, min(80, ef)))  # Clamp EF between 20-80%\n","                \n","            except Exception as e:\n","                print(f\"Error generating sample {i}: {e}\")\n","                continue\n","                \n","            if i > 0 and i % 1000 == 0:\n","                print(f\"Generated {i}/{self.n_samples} samples\")\n","        \n","        # Convert to DataFrame\n","        X_df = pd.DataFrame(X_features)\n","        \n","        # Fill any remaining NaN values\n","        X_df = X_df.fillna(0)\n","        \n","        return X_df, np.array(y_ef)\n","\n","class EjectionFractionPredictor:\n","    def __init__(self):\n","        self.models = {}\n","        self.scaler = StandardScaler()\n","        self.feature_importance = {}\n","        self.best_model = None\n","        \n","    def prepare_data(self, X, y):\n","        \"\"\"Prepare and split data\"\"\"\n","        # Handle missing values\n","        X = X.fillna(X.median())\n","        \n","        # Remove constant columns\n","        X = X.loc[:, X.std() > 0]\n","        \n","        # Split data\n","        X_train, X_test, y_train, y_test = train_test_split(\n","            X, y, test_size=0.2, random_state=42, shuffle=True\n","        )\n","        \n","        # Scale features\n","        X_train_scaled = self.scaler.fit_transform(X_train)\n","        X_test_scaled = self.scaler.transform(X_test)\n","        \n","        return X_train_scaled, X_test_scaled, y_train, y_test, X_train.columns\n","    \n","    def train_models(self, X, y):\n","        \"\"\"Train multiple models and select the best one\"\"\"\n","        X_train, X_test, y_train, y_test, feature_names = self.prepare_data(X, y)\n","        \n","        # Define models to try\n","        models = {\n","            'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1),\n","            'GradientBoosting': GradientBoostingRegressor(n_estimators=100, random_state=42),\n","            'XGBoost': xgb.XGBRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n","        }\n","        \n","        best_score = float('inf')\n","        best_model = None\n","        best_model_name = None\n","        \n","        results = []\n","        \n","        for name, model in models.items():\n","            print(f\"\\nTraining {name}...\")\n","            \n","            try:\n","                # Cross-validation\n","                cv_scores = cross_val_score(model, X_train, y_train, \n","                                          scoring='neg_mean_absolute_error', cv=5)\n","                mae_cv = -cv_scores.mean()\n","                \n","                # Train on full training set\n","                model.fit(X_train, y_train)\n","                \n","                # Test set performance\n","                y_pred = model.predict(X_test)\n","                mae_test = mean_absolute_error(y_test, y_pred)\n","                rmse_test = np.sqrt(mean_squared_error(y_test, y_pred))\n","                r2_test = r2_score(y_test, y_pred)\n","                \n","                print(f\"{name} Results:\")\n","                print(f\"  CV MAE: {mae_cv:.3f}\")\n","                print(f\"  Test MAE: {mae_test:.3f}\")\n","                print(f\"  Test RMSE: {rmse_test:.3f}\")\n","                print(f\"  Test R²: {r2_test:.3f}\")\n","                \n","                # Store model and metrics\n","                self.models[name] = {\n","                    'model': model,\n","                    'cv_mae': mae_cv,\n","                    'test_mae': mae_test,\n","                    'test_rmse': rmse_test,\n","                    'test_r2': r2_test\n","                }\n","                \n","                results.append({\n","                    'model': name,\n","                    'mae_cv': mae_cv,\n","                    'mae_test': mae_test,\n","                    'r2_test': r2_test\n","                })\n","                \n","                # Update best model\n","                if mae_test < best_score:\n","                    best_score = mae_test\n","                    best_model = model\n","                    best_model_name = name\n","                    self.best_model = model\n","                    \n","            except Exception as e:\n","                print(f\"Error training {name}: {e}\")\n","                continue\n","        \n","        # Display results comparison\n","        results_df = pd.DataFrame(results)\n","        print(\"\\n\" + \"=\"*50)\n","        print(\"Model Comparison Results:\")\n","        print(\"=\"*50)\n","        print(results_df.to_string(index=False))\n","        \n","        print(f\"\\nBest model: {best_model_name} with Test MAE: {best_score:.3f}\")\n","        \n","        # Store feature importance for the best model\n","        if best_model is not None and hasattr(best_model, 'feature_importances_'):\n","            self.feature_importance = dict(zip(feature_names, best_model.feature_importances_))\n","        \n","        return best_model_name, best_model\n","    \n","    def optimize_hyperparameters(self, X, y):\n","        \"\"\"Optimize hyperparameters for XGBoost\"\"\"\n","        X_train, X_test, y_train, y_test, _ = self.prepare_data(X, y)\n","        \n","        print(\"\\nOptimizing XGBoost hyperparameters...\")\n","        \n","        # Simplified parameter grid for faster optimization\n","        param_grid = {\n","            'n_estimators': [100, 200],\n","            'max_depth': [3, 5],\n","            'learning_rate': [0.05, 0.1],\n","            'subsample': [0.8, 0.9]\n","        }\n","        \n","        xgb_model = xgb.XGBRegressor(random_state=42, n_jobs=-1)\n","        \n","        grid_search = GridSearchCV(\n","            xgb_model, param_grid, \n","            scoring='neg_mean_absolute_error', \n","            cv=3,  # Fewer folds for speed\n","            n_jobs=-1,\n","            verbose=1\n","        )\n","        \n","        grid_search.fit(X_train, y_train)\n","        \n","        print(\"Best parameters:\", grid_search.best_params_)\n","        print(\"Best CV score (MAE):\", -grid_search.best_score_)\n","        \n","        self.best_model = grid_search.best_estimator_\n","        return grid_search.best_estimator_\n","    \n","    def evaluate_model(self, model, X_test, y_test):\n","        \"\"\"Comprehensive model evaluation\"\"\"\n","        y_pred = model.predict(X_test)\n","        \n","        metrics = {\n","            'MAE': mean_absolute_error(y_test, y_pred),\n","            'RMSE': np.sqrt(mean_squared_error(y_test, y_pred)),\n","            'R²': r2_score(y_test, y_pred),\n","            'Max Error': np.max(np.abs(y_test - y_pred))\n","        }\n","        \n","        print(\"\\nModel Evaluation Metrics:\")\n","        for metric, value in metrics.items():\n","            print(f\"{metric}: {value:.3f}\")\n","        \n","        # Plot predictions vs actual\n","        plt.figure(figsize=(12, 5))\n","        \n","        plt.subplot(1, 2, 1)\n","        plt.scatter(y_test, y_pred, alpha=0.6, s=50)\n","        plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)\n","        plt.xlabel('Actual EF (%)')\n","        plt.ylabel('Predicted EF (%)')\n","        plt.title('Actual vs Predicted Ejection Fraction')\n","        plt.grid(True, alpha=0.3)\n","        \n","        plt.subplot(1, 2, 2)\n","        errors = y_test - y_pred\n","        plt.hist(errors, bins=30, alpha=0.7, edgecolor='black')\n","        plt.xlabel('Prediction Error (%)')\n","        plt.ylabel('Frequency')\n","        plt.title('Distribution of Prediction Errors')\n","        plt.grid(True, alpha=0.3)\n","        \n","        plt.tight_layout()\n","        plt.show()\n","        \n","        return metrics\n","    \n","    def plot_feature_importance(self, top_n=15):\n","        \"\"\"Plot feature importance\"\"\"\n","        if not self.feature_importance:\n","            print(\"No feature importance data available.\")\n","            return\n","        \n","        # Sort features by importance\n","        sorted_features = sorted(self.feature_importance.items(), \n","                               key=lambda x: x[1], reverse=True)[:top_n]\n","        \n","        features, importance = zip(*sorted_features)\n","        \n","        plt.figure(figsize=(10, 8))\n","        y_pos = np.arange(len(features))\n","        \n","        plt.barh(y_pos, importance, align='center', alpha=0.7)\n","        plt.yticks(y_pos, features)\n","        plt.xlabel('Feature Importance')\n","        plt.title(f'Top {top_n} Most Important Features')\n","        plt.gca().invert_yaxis()\n","        plt.grid(True, alpha=0.3, axis='x')\n","        plt.tight_layout()\n","        plt.show()\n","\n","# Main execution\n","if __name__ == \"__main__\":\n","    print(\"Cardiac EF Prediction Model Training\")\n","    print(\"=\" * 50)\n","    \n","    # Generate synthetic dataset\n","    print(\"Generating synthetic dataset...\")\n","    generator = SyntheticDataGenerator(n_samples=5000)  # Smaller for demo\n","    X, y = generator.generate_dataset()\n","    \n","    print(f\"Dataset shape: {X.shape}\")\n","    print(f\"EF range: {y.min():.1f}% - {y.max():.1f}%\")\n","    print(f\"EF mean: {y.mean():.1f}% ± {y.std():.1f}%\")\n","    \n","    # Train model\n","    print(\"\\nTraining models...\")\n","    predictor = EjectionFractionPredictor()\n","    best_model_name, best_model = predictor.train_models(X, y)\n","    \n","    # Hyperparameter optimization (optional)\n","    print(\"\\nPerforming hyperparameter optimization...\")\n","    try:\n","        optimized_model = predictor.optimize_hyperparameters(X, y)\n","        \n","        # Evaluate optimized model\n","        X_train, X_test, y_train, y_test, _ = predictor.prepare_data(X, y)\n","        print(\"\\nEvaluating optimized model...\")\n","        predictor.evaluate_model(optimized_model, X_test, y_test)\n","    except Exception as e:\n","        print(f\"Hyperparameter optimization failed: {e}\")\n","        print(\"Using the best model from initial training...\")\n","    \n","    # Plot feature importance\n","    if predictor.feature_importance:\n","        print(\"\\nPlotting feature importance...\")\n","        predictor.plot_feature_importance()\n","    \n","    # Save the model\n","    if predictor.best_model is not None:\n","        joblib.dump(predictor.best_model, 'ef_predictor_model.pkl')\n","        joblib.dump(predictor.scaler, 'feature_scaler.pkl')\n","        print(\"\\nModel saved successfully!\")\n","        \n","        # Print model performance summary\n","        X_train, X_test, y_train, y_test, _ = predictor.prepare_data(X, y)\n","        y_pred = predictor.best_model.predict(X_test)\n","        final_mae = mean_absolute_error(y_test, y_pred)\n","        final_r2 = r2_score(y_test, y_pred)\n","        \n","        print(\"\\n\" + \"=\"*50)\n","        print(\"FINAL MODEL PERFORMANCE SUMMARY\")\n","        print(\"=\"*50)\n","        print(f\"Best Model: {best_model_name}\")\n","        print(f\"Test MAE: {final_mae:.2f}%\")\n","        print(f\"Test R²: {final_r2:.3f}\")\n","        print(f\"EF Prediction Range: 20-80%\")\n","        print(\"Model ready for deployment!\")\n","    else:\n","        print(\"No model was successfully trained.\")"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":141.14568,"end_time":"2025-09-24T11:01:04.677731","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-09-24T10:58:43.532051","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}